Thread(to_run, *args, e_handler=default_except, **kwargs):
  The Thread class is the main class through which a user can create and
  manipulate threads.

  to_run is the callable the user aims to run and it's normal arguments can be
  given to the constructor is order. The e_handler (exception handler) should
  always be provided with a keyword. All other keyword arguments to the intended
  function (to_run) are acceptable.

  The thread will run as soon as the object is constructed.


  join():
    Joins with the thread and returns the returned value. Implicit side effects
    (globals, file I/O) will also occur at this phase.

    Note that users cannot join with a normal thread more than once. In such
    cases, an exception will arise. Exceptions could also occur if the Thread
    threw an exception not handled by the e_handler provided at thread
    construction.

    If the to_run callable is a generator, the user can join with it as long as
    the generator is valid and each join call should yield the next result.

  joinable():
    Reveals weather the thread is joinable.

    Normal callables are always joinable before a join statement. Generators are
    always joinable as long as the generator has values left.

  recreate():
    Reruns the same thread separately. Returns a new instance of Thread.

  terminate():
    Terminates the running thread. No side effects are carried over.

  join_all(pool=None):
    Class Method. Join with all the threads in the pool list.

    In case of the default value for pool, all active threads are joined.

    The return value is a list of return values of the threads in the pool.

    NOTE: Implicit side effects can happen in any order.

  join_any(pool):
    Class Method. Join with any of the threads in the pool list and return
    immediately.

    The return value from the joined thread and the rest of the pool list will
    be returned (the returned pool list will not have the thread this function
    just joined).

    NOTE: Implicit side effects can happen in any order.




porpals(target):
  Creates a trackable instance of target.

  NOTE: Users should use the return value of this function as their new global
  rather using the old one.
